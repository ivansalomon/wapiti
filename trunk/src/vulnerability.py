class Vulnerability:
    #Constants
    SQL_INJECTION = _("SQL Injection")
    BLIND_SQL_INJECTION = _("Blind SQL Injection")
    FILE_HANDLING = _("File Handling")
    XSS = _("Cross Site Scripting")
    CRLF = _("CRLF")
    EXEC = _("Commands execution")
    RES_CONSUMPTION = _("Resource consumption")
    HTACCESS = _("Htaccess Bypass")
    BACKUP = _("Backup file")
    NIKTO = _("Potentially dangerous file")

    HIGH_LEVEL_VULNERABILITY = "1"
    MEDIUM_LEVEL_VULNERABILITY = "2"
    LOW_LEVEL_VULNERABILITY = "3"

    MSG_500 = _("Received a HTTP 500 error in {0}")
    MSG_EVIL_URL = _("  Evil url: {0}")
    MSG_TIMEOUT = _("Timeout occured in {0}")
    MSG_PARAM_INJECT = _("{0} in {1} via injection in the parameter {2}")
    MSG_WITH_PARAMS = _("  with POST parameters: {0}")
    MSG_FROM = _("  coming from {0}")
    MSG_QS_INJECT = _("{0} in {1} via injection in the query string")
    MSG_PATH_INJECT = _("{0} in {1} via injection in the resource path")
    MSG_EVIL_PARAM = _("Involved parameter: {0}")

    MSG_QS_TIMEOUT = _("The request timed out while attempting to inject a payload in the query string")
    MSG_PATH_TIMEOUT = _("The request timed out while attempting to inject a payload in the resource path")
    MSG_PARAM_TIMEOUT = _("The request timed out while attempting to inject a payload in the parameter {0}")

    MSG_QS_500 = _("The server responded with a 500 HTTP error code "
                   "while attempting to inject a payload in the query string")
    MSG_PATH_500 = _("The server responded with a 500 HTTP error code "
                     "while attempting to inject a payload in the resource path")
    MSG_PARAM_500 = _("The server responded with a 500 HTTP error code "
                      "while attempting to inject a payload in the parameter {0}")

    name = ""
    description = ""
    solution = ""
    references = {}

    def getName(self):
        return self.name

    def getDescription(self):
        return self.description

    def getSolution(self):
        return self.solution

    def getReferences(self):
        return self.references

    def setName(self, name):
        self.name = name

    def setDescription(self, description):
        self.description = description

    def setSolution(self, solution):
        self.solution = solution

    def setReferences(self, references):
        self.references = references
